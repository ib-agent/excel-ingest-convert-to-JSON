#!/usr/bin/env python3
"""
API Key Setup Utility

This script helps you securely store your Anthropic API key for the Excel AI processing system.
It provides multiple storage options and validates the key works correctly.
"""

import os
import sys
import getpass
from pathlib import Path


def load_env_file(env_file_path):
    """Load environment variables from a file."""
    if not os.path.exists(env_file_path):
        return {}
    
    env_vars = {}
    with open(env_file_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    
    return env_vars


def save_to_env_file(api_key, env_file_path="config.env"):
    """Save API key to environment file."""
    
    # Read existing config if it exists
    existing_vars = load_env_file(env_file_path)
    
    # Update with new API key
    existing_vars['ANTHROPIC_API_KEY'] = api_key
    
    # Set defaults for other variables if not present
    defaults = {
        'ANTHROPIC_MODEL': 'claude-3-sonnet-20241022',
        'AI_ANALYSIS_TIMEOUT': '30',
        'MAX_PROMPT_TOKENS': '8000',
        'MAX_COMPLETION_TOKENS': '4000',
        'MAX_COST_PER_ANALYSIS': '0.10',
        'DAILY_COST_LIMIT': '10.00'
    }
    
    for key, default_value in defaults.items():
        if key not in existing_vars:
            existing_vars[key] = default_value
    
    # Write to file
    with open(env_file_path, 'w') as f:
        f.write("# Excel AI Processing Configuration\n")
        f.write("# Generated by setup_api_key.py\n\n")
        
        f.write("# Anthropic API Configuration\n")
        f.write(f"ANTHROPIC_API_KEY={existing_vars['ANTHROPIC_API_KEY']}\n")
        f.write(f"ANTHROPIC_MODEL={existing_vars['ANTHROPIC_MODEL']}\n\n")
        
        f.write("# API Limits\n")
        f.write(f"AI_ANALYSIS_TIMEOUT={existing_vars['AI_ANALYSIS_TIMEOUT']}\n")
        f.write(f"MAX_PROMPT_TOKENS={existing_vars['MAX_PROMPT_TOKENS']}\n")
        f.write(f"MAX_COMPLETION_TOKENS={existing_vars['MAX_COMPLETION_TOKENS']}\n\n")
        
        f.write("# Cost Controls\n")
        f.write(f"MAX_COST_PER_ANALYSIS={existing_vars['MAX_COST_PER_ANALYSIS']}\n")
        f.write(f"DAILY_COST_LIMIT={existing_vars['DAILY_COST_LIMIT']}\n")
    
    print(f"‚úÖ Configuration saved to: {env_file_path}")
    return env_file_path


def add_to_shell_profile(api_key):
    """Add API key to shell profile for persistent sessions."""
    
    # Detect shell
    shell = os.environ.get('SHELL', '/bin/bash')
    
    if 'zsh' in shell:
        profile_file = os.path.expanduser('~/.zshrc')
    elif 'bash' in shell:
        profile_file = os.path.expanduser('~/.bashrc')
        if not os.path.exists(profile_file):
            profile_file = os.path.expanduser('~/.bash_profile')
    else:
        profile_file = os.path.expanduser('~/.profile')
    
    # Check if already exists
    if os.path.exists(profile_file):
        with open(profile_file, 'r') as f:
            content = f.read()
            if 'ANTHROPIC_API_KEY' in content:
                print(f"‚ö†Ô∏è  ANTHROPIC_API_KEY already exists in {profile_file}")
                response = input("Replace it? (y/N): ").lower()
                if response != 'y':
                    return False
    
    # Add to profile
    export_line = f'export ANTHROPIC_API_KEY="{api_key}"\n'
    
    with open(profile_file, 'a') as f:
        f.write(f'\n# Excel AI Processing - Added by setup_api_key.py\n')
        f.write(export_line)
    
    print(f"‚úÖ Added to shell profile: {profile_file}")
    print(f"üí° Restart your terminal or run: source {profile_file}")
    return True


def test_api_key(api_key):
    """Test if the API key works."""
    print("üß™ Testing API key...")
    
    try:
        # Set the key temporarily
        os.environ['ANTHROPIC_API_KEY'] = api_key
        
        # Import and test client
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from converter.anthropic_excel_client import AnthropicExcelClient
        
        client = AnthropicExcelClient()
        
        if client.is_available():
            print("‚úÖ API key is valid and client is ready!")
            
            # Test with a simple mock analysis
            mock_sheet = {
                'name': 'Test Sheet',
                'rows': [
                    {'r': 1, 'cells': [[1, 'Header1'], [2, 'Header2']]},
                    {'r': 2, 'cells': [[1, 'Data1'], [2, 'Data2']]}
                ]
            }
            
            cost_estimate = client.estimate_api_cost(mock_sheet)
            print(f"üí∞ Cost estimate for test analysis: ${cost_estimate['estimated_cost_usd']:.4f}")
            
            return True
        else:
            print("‚ùå API key validation failed")
            return False
            
    except ImportError as e:
        print(f"‚ö†Ô∏è  Cannot test API key - missing dependencies: {str(e)}")
        print("üí° The key has been saved but could not be validated")
        return True  # Assume it's okay
        
    except Exception as e:
        print(f"‚ùå API key test failed: {str(e)}")
        return False


def create_load_script():
    """Create a script to easily load the environment configuration."""
    
    load_script_content = '''#!/bin/bash
# Load Excel AI Processing Configuration
# Usage: source load_config.sh

if [ -f "config.env" ]; then
    echo "üìù Loading configuration from config.env..."
    
    # Load each line that looks like KEY=value
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ $line =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
            continue
        fi
        
        # Export variables
        if [[ $line =~ ^[[:space:]]*([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]// /}"
            value="${BASH_REMATCH[2]}"
            export "$key=$value"
            echo "   ‚úÖ $key"
        fi
    done < config.env
    
    echo "üöÄ Configuration loaded! AI analysis is now available."
else
    echo "‚ùå config.env not found. Run setup_api_key.py first."
fi
'''
    
    with open('load_config.sh', 'w') as f:
        f.write(load_script_content)
    
    # Make executable
    os.chmod('load_config.sh', 0o755)
    
    print("‚úÖ Created load_config.sh script")
    print("üí° Usage: source load_config.sh")


def main():
    """Main setup process."""
    print("üîê ANTHROPIC API KEY SETUP")
    print("="*40 + "\n")
    
    print("This script will help you securely store your Anthropic API key.")
    print("You can get your API key from: https://console.anthropic.com/\n")
    
    # Get API key
    api_key = getpass.getpass("Enter your Anthropic API key: ").strip()
    
    if not api_key:
        print("‚ùå No API key provided. Exiting.")
        return
    
    if not api_key.startswith('sk-ant-'):
        print("‚ö†Ô∏è  Warning: API key doesn't start with 'sk-ant-'. Are you sure it's correct?")
        response = input("Continue anyway? (y/N): ").lower()
        if response != 'y':
            return
    
    # Test the key
    if not test_api_key(api_key):
        print("‚ùå API key test failed. Please check your key and try again.")
        return
    
    print("\n" + "="*40)
    print("How would you like to store the API key?")
    print("1. Environment file (config.env) - Recommended")
    print("2. Shell profile (~/.zshrc or ~/.bashrc) - Persistent")
    print("3. Both")
    print("="*40)
    
    choice = input("Choose option (1-3): ").strip()
    
    if choice in ['1', '3']:
        env_file = save_to_env_file(api_key)
        create_load_script()
        
        print(f"\nüìù To use the configuration:")
        print(f"   source load_config.sh")
        print(f"   # or")
        print(f"   export $(cat config.env | grep -v '^#' | xargs)")
    
    if choice in ['2', '3']:
        add_to_shell_profile(api_key)
    
    print(f"\n‚úÖ Setup complete!")
    
    if choice == '1':
        print(f"üí° Next steps:")
        print(f"   1. Run: source load_config.sh")
        print(f"   2. Test: python collect_comparison_data.py")
    elif choice == '2':
        print(f"üí° Next steps:")
        print(f"   1. Restart your terminal or run: source ~/.zshrc")
        print(f"   2. Test: python collect_comparison_data.py")
    else:
        print(f"üí° The API key is now available in multiple ways:")
        print(f"   - Temporarily: source load_config.sh")
        print(f"   - Permanently: restart terminal")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Setup interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Setup failed: {str(e)}")
        import traceback
        traceback.print_exc()
